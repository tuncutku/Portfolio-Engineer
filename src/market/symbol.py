"""Symbol object used to extract market data."""
# pylint: disable=invalid-name

from datetime import date, timedelta
from typing import Union
from dataclasses import dataclass

from pandas import Series, bdate_range
from pandas_datareader.data import DataReader
from yfinance import Ticker

data_source = "yahoo"

requests = [
    "sector",
    "fullTimeEmployees",
    "longBusinessSummary",
    "city",
    "country",
    "website",
    "industry",
    "previousClose",
    "regularMarketOpen",
    "twoHundredDayAverage",
    "trailingAnnualDividendYield",
    "payoutRatio",
    "volume24Hr",
    "regularMarketDayHigh",
    "navPrice",
    "averageDailyVolume10Day",
    "regularMarketPreviousClose",
    "fiftyDayAverage",
    "trailingAnnualDividendRate",
    "open",
    "toCurrency",
    "averageVolume10days",
    "expireDate",
    "yield",
    "algorithm",
    "dividendRate",
    "exDividendDate",
    "beta",
    "startDate",
    "regularMarketDayLow",
    "priceHint",
    "currency",
    "trailingPE",
    "regularMarketVolume",
    "lastMarket",
    "maxSupply",
    "openInterest",
    "marketCap",
    "volumeAllCurrencies",
    "strikePrice",
    "averageVolume",
    "priceToSalesTrailing12Months",
    "dayLow",
    "ask",
    "ytdReturn",
    "askSize",
    "volume",
    "fiftyTwoWeekHigh",
    "forwardPE",
    "fromCurrency",
    "fiveYearAvgDividendYield",
    "fiftyTwoWeekLow",
    "bid",
    "tradeable",
    "dividendYield",
    "bidSize",
    "dayHigh",
    "exchange",
    "shortName",
    "longName",
    "exchangeTimezoneName",
    "exchangeTimezoneShortName",
    "isEsgPopulated",
    "gmtOffSetMilliseconds",
    "quoteType",
    "symbol",
    "messageBoardId",
    "market",
    "annualHoldingsTurnover",
    "enterpriseToRevenue",
    "beta3Year",
    "profitMargins",
    "enterpriseToEbitda",
    "52WeekChange",
    "morningStarRiskRating",
    "forwardEps",
    "revenueQuarterlyGrowth",
    "sharesOutstanding",
    "fundInceptionDate",
    "annualReportExpenseRatio",
    "bookValue",
    "sharesShort",
    "sharesPercentSharesOut",
    "fundFamily",
    "lastFiscalYearEnd",
    "heldPercentInstitutions",
    "netIncomeToCommon",
    "trailingEps",
    "lastDividendValue",
    "SandP52WeekChange",
    "priceToBook",
    "shortRatio",
    "sharesShortPreviousMonthDate",
    "floatShares",
    "enterpriseValue",
    "threeYearAverageReturn",
    "earningsQuarterlyGrowth",
    "pegRatio",
    "fiveYearAverageReturn",
    "regularMarketPrice",
]


# @dataclass
# class Info:
#     """Information request generated by yahoo finance."""


@dataclass
class Symbol:
    """Form object to get market data of the underlying symbol."""

    symbol: str

    def __repr__(self):
        return self.symbol

    def __eq__(self, other: Union[str, "Symbol"]) -> bool:
        if isinstance(other, Symbol):
            return self.symbol == other.symbol
        if isinstance(other, str):
            return self.symbol == other
        raise ValueError(f"Cannot compare {other}.")

    @property
    def info(self) -> dict:
        """Information of the symbol."""
        return Ticker(self.symbol).info

    @property
    def is_valid(self) -> bool:
        """Valide if the ticker exist in the database source."""
        return bool(self.info.get("symbol"))

    def is_trading_day(self, trade_date: date) -> bool:
        """Validate if the date is a trading date."""
        start = trade_date - timedelta(3)
        end = trade_date + timedelta(3)
        index = self.index(start, end, bday=False)
        return trade_date.strftime("%Y-%m-%d") in index

    def index(
        self, start: date, end: date, request: str = "Adj Close", bday: bool = True
    ) -> Series:
        """Underlying index of the symbol."""
        raw_data = DataReader(self.symbol, data_source, start=start, end=end)
        raw_index: Series = raw_data[request]
        raw_index.rename(self.symbol, inplace=True)
        if bday:
            raw_index = raw_index.reindex(
                bdate_range(start, end), method="ffill"
            ).bfill()
        return raw_index
